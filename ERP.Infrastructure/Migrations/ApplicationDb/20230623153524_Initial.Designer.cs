// <auto-generated />
using System;
using ERP.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERP.Infrastructure.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230623153524_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AspNetCoreHero.EntityFrameworkCore.AuditTrail.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCompany")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClientDocument")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustryServed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsOnColppy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OperationStateId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SizeCompany")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("OperationStateId");

                    b.HasIndex("StateId");

                    b.HasIndex("BusinessName", "DocumentNumber")
                        .IsUnique()
                        .HasFilter("[DocumentNumber] IS NOT NULL");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AnotherReason")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommunicationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ComunicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<bool>("ConsultedProduct")
                        .HasColumnType("bit");

                    b.Property<string>("ContactSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Incoming")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Outgoing")
                        .HasColumnType("bit");

                    b.Property<bool>("PostSale")
                        .HasColumnType("bit");

                    b.Property<int?>("SaleOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SaleOperationId");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.ConsultedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CommunicationId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Functionality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionalityId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PieceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PieceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("StructureDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationId");

                    b.ToTable("ConsultedProducts");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReminderCheck")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.SaleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("SaleOperations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<int?>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryNoteHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Package")
                        .HasColumnType("int");

                    b.Property<decimal>("PackageWeight")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("WorkActivityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("DeliveryNoteHeaderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("WorkActivityId");

                    b.ToTable("DeliveryNoteDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("TransportProviderId")
                        .HasColumnType("int");

                    b.Property<bool>("wasExportedToPDF")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TransportProviderId");

                    b.ToTable("DeliveryNoteHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Denomination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TimeOffset")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.DollarExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.ToTable("DollarExchangeRates");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.IVACondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("IVAConditions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.OperationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OperationStates");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.UnitMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitMeasures");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Lists.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Lists.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryNoteHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("FatherProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FatherStructureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncomeHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("IncomeProductId")
                        .HasColumnType("int");

                    b.Property<int>("IncomeStateId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MissingProductId")
                        .HasColumnType("int");

                    b.Property<string>("NextStation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OCNumber")
                        .HasColumnType("int");

                    b.Property<int?>("OTNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Reception")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryNoteHeaderId");

                    b.HasIndex("FatherProductId");

                    b.HasIndex("FatherStructureId");

                    b.HasIndex("IncomeHeaderId");

                    b.HasIndex("IncomeProductId");

                    b.HasIndex("IncomeStateId");

                    b.HasIndex("MissingProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("IncomeDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNoteNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ExternalProcessStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OwnTransport")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("TransportProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalProcessStationId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TransportProviderId");

                    b.ToTable("IncomeHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IncomeStates");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.AccessoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdProductAccessory")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdProductAccessory");

                    b.ToTable("AccessoriesProducts");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Archive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ArchiveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PathUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Archives");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ArchiveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ArchiveTypes");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ActivityStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Admin")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CUIT")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<bool>("CostHasIVA")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DispatchUpdatedCtaCte")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Eslogan")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GrossIncome")
                        .HasColumnType("int");

                    b.Property<int>("IVADefault")
                        .HasColumnType("int");

                    b.Property<int>("IdClientAuto")
                        .HasColumnType("int");

                    b.Property<int?>("IdProvinceAuto")
                        .HasColumnType("int");

                    b.Property<int>("IdSupplierAuto")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerceptionAgent")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Skype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subjet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UseAFIPTesting")
                        .HasColumnType("bit");

                    b.Property<string>("Web")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.CutType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CutTypes");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.FunctionalArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FunctionalAreas");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.PieceFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PieceFormats");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.PieceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PieceTypes");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Existence")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("ExistenceUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("IVATypeId")
                        .HasColumnType("int");

                    b.Property<string>("IsOnColppy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationStationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Minimum")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("MinimumUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<decimal>("PhysicalSpaceHeight")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("PhysicalSpaceLength")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("PhysicalSpaceWidth")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("ProductFeatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitID")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityToOrder")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("QuantityToOrderUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("Shelf")
                        .HasColumnType("int");

                    b.Property<int>("Shelves_Rack")
                        .HasColumnType("int");

                    b.Property<decimal?>("StockHeight")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("StockHeightUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("StockLength")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("StockLengthUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("StockObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("StockQuantityUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("StockUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("StockWeight")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("StockWeightUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("StockWidth")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("StockWidthUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal>("StorageQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("StorageUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("ExistenceUnitMeasureId");

                    b.HasIndex("IVATypeId");

                    b.HasIndex("LocationStationId");

                    b.HasIndex("MinimumUnitMeasureId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductFeatureId");

                    b.HasIndex("QuantityToOrderUnitMeasureId");

                    b.HasIndex("StockHeightUnitMeasureId");

                    b.HasIndex("StockLengthUnitMeasureId");

                    b.HasIndex("StockQuantityUnitMeasureId");

                    b.HasIndex("StockUnitMeasureId");

                    b.HasIndex("StockWeightUnitMeasureId");

                    b.HasIndex("StockWidthUnitMeasureId");

                    b.HasIndex("StorageUnitMeasureId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductCutType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CutTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CutTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCutTypes");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("Appreciation")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("BagQuantityMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bagel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bought")
                        .HasColumnType("bit");

                    b.Property<int?>("ColorsXPass")
                        .HasColumnType("int");

                    b.Property<bool>("Component")
                        .HasColumnType("bit");

                    b.Property<string>("ComponentHighPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentLongPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentWidhtPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Density")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Diameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionPlates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("HeightPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InHouseManufacturing")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Legs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LenghtMaxPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LenghtMinPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineLenght")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackagingDimension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassageWidthMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PieceXCut")
                        .HasColumnType("int");

                    b.Property<decimal?>("PowerHP")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("PressedCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressedSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressingCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintHeightMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintWidthMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawMaterialCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RawMaterialDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollQuantityMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Standar")
                        .HasColumnType("bit");

                    b.Property<bool>("StoredStock")
                        .HasColumnType("bit");

                    b.Property<string>("WidthMaxPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WidthMinPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPressure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductPieceFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PieceFormatId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PieceFormatId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPieceFormats");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductPieceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PieceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PieceTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPieceTypes");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductSupplyVoltage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyVoltageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyVoltageId");

                    b.ToTable("ProductSupplyVoltages");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.RelProductStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Time")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StationId");

                    b.ToTable("RelProductStations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionalAreaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Users")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrderDisplayType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FunctionalAreaId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandard")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastVersionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyVoltageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastVersionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyVoltageId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.StructureItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SonProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SonStructureId")
                        .HasColumnType("int");

                    b.Property<int?>("StructureId")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SonProductId");

                    b.HasIndex("SonStructureId");

                    b.HasIndex("StructureId");

                    b.HasIndex("VersionId");

                    b.ToTable("StructureItems");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.StructureVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.SupplyVoltage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SupplyVoltages");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.GroupedWorkAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("WorkActivitiesIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("GroupedWorkActions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkActivityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkActivityId");

                    b.ToTable("WorkActions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssignedUsersIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ComebackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateToProduction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutsourcedProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StateActivity")
                        .HasColumnType("bit");

                    b.Property<bool?>("ToShipments")
                        .HasColumnType("bit");

                    b.Property<int>("WorkOrderItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutsourcedProviderId");

                    b.HasIndex("ProductStationId");

                    b.HasIndex("WorkOrderItemId");

                    b.ToTable("WorkActivities");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberVersionStructure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TotalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkOrderHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderHeaderId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkOrderHeaderNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStateId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StructureId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderItemOfId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStateId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StructureId");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex("WorkOrderItemOfId");

                    b.ToTable("WorkOrderItems");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.MissingProducts.MissingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasedQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("QuantityToOrder")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("QuantityToOrderUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("StateMissingProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("QuantityToOrderUnitMeasureId");

                    b.HasIndex("StateMissingProductId");

                    b.HasIndex("StorageUnitMeasureId");

                    b.ToTable("MissingProducts");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.MissingProducts.PurchaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PurchaseStates");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Charge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("SubsidiaryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.FinancialInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("FinancialInformations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("GrossIncome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IVAConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsOnColppy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfitID")
                        .HasColumnType("int");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("WebPage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("IVAConditionId");

                    b.HasIndex("StateId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.RelProviderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DollarPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("HeightUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Lenght")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("LengthUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PesosPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal?>("PresentationQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("PresentationUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("WeightUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("WidthUnitMeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeightUnitMeasureId");

                    b.HasIndex("LengthUnitMeasureId");

                    b.HasIndex("PresentationUnitMeasureId");

                    b.HasIndex("PriceUnitMeasureId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UnitMeasureId");

                    b.HasIndex("WeightUnitMeasureId");

                    b.HasIndex("WidthUnitMeasureId");

                    b.ToTable("RelProviderProducts");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.RelProviderStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DollarPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PesosPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("PriceUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriceUnitMeasureId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StationId");

                    b.ToTable("RelProviderStations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Subsidiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("SubsidiaryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StateId");

                    b.ToTable("Subsidiaries");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IncomeDetailId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MissingProductId")
                        .HasColumnType("int");

                    b.Property<int>("MoneyType")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPriceQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("OriginalProviderQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("PriceQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("PriceUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProviderQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ProviderUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasedQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("IncomeDetailId")
                        .IsUnique()
                        .HasFilter("[IncomeDetailId] IS NOT NULL");

                    b.HasIndex("MissingProductId");

                    b.HasIndex("PriceUnitMeasureId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderUnitMeasureId");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.HasIndex("PurchaseStateId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IVA")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteRequestResponseHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("QuoteRequestResponseHeaderId");

                    b.ToTable("PurchaseOrderHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.ServicePODetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryNoteDetailId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServicePOHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryNoteDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServicePOHeaderId");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("ServicePurchaseOrderDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.ServicePOHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IVA")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseStateId")
                        .HasColumnType("int");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurchaseStateId");

                    b.HasIndex("StationId");

                    b.ToTable("ServicePurchaseOrderHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MissingProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("QuantityToOrder")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("QuantityToOrderUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MissingProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderUnitMeasureId");

                    b.HasIndex("PurchaseStateId");

                    b.HasIndex("QuantityToOrderUnitMeasureId");

                    b.HasIndex("QuoteRequestHeaderId");

                    b.ToTable("QuoteRequestDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QuoteRequestHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AlternativeProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MissingProductId")
                        .HasColumnType("int");

                    b.Property<int>("MoneyType")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPriceQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("OriginalProviderQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("PriceQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("PriceUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProviderQuantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ProviderUnitMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestResponseHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeProductId");

                    b.HasIndex("MissingProductId");

                    b.HasIndex("PriceUnitMeasureId");

                    b.HasIndex("ProviderUnitMeasureId");

                    b.HasIndex("QuoteRequestResponseHeaderId");

                    b.ToTable("QuoteRequestResponseDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IVA")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(30,6)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("QuoteRequestHeaderId");

                    b.ToTable("QuoteRequestResponseHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.RelQuoteRequestProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("QuoteRequestHeaderId");

                    b.ToTable("RelQuoteRequestProviders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.DeliveryDateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NewDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OldDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("DeliveryDateHistories");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("BelongToASale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MissingProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentageOfTotalAdvance")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("SaleCategory")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SaleOperationId")
                        .HasColumnType("int");

                    b.Property<int?>("StructureId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyVoltageId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("OrderStateId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOperationId");

                    b.HasIndex("StructureId");

                    b.HasIndex("SupplyVoltageId");

                    b.HasIndex("WorkOrderId")
                        .IsUnique()
                        .HasFilter("[WorkOrderId] IS NOT NULL");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Billed")
                        .HasColumnType("int");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(30,6)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("[Id]");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderTotalPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Packaging")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceOfDelivery")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductionObservations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SaleObservations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SaleOperationId")
                        .HasColumnType("int");

                    b.Property<decimal>("SecureAndFreightCosts")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(30,6)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(30,6)");

                    b.Property<string>("Transport")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeOfFreightAndSecure")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("User")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ValidOfferDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderStateId");

                    b.HasIndex("SaleOperationId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.OrderState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStates");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceAll")
                        .HasColumnType("decimal(30,6)");

                    b.Property<DateTime?>("PriceAllDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PriceAllObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceArg")
                        .HasColumnType("decimal(30,6)");

                    b.Property<DateTime?>("PriceArgDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PriceArgObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceMx")
                        .HasColumnType("decimal(30,6)");

                    b.Property<DateTime?>("PriceMxDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PriceMxObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StructureId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Client", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Lists.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Domain.Entities.Commons.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("ERP.Domain.Entities.Commons.OperationState", "OperationState")
                        .WithMany()
                        .HasForeignKey("OperationStateId");

                    b.HasOne("ERP.Domain.Entities.Lists.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("DocumentType");

                    b.Navigation("OperationState");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Communication", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Clients.Client", "Client")
                        .WithMany("Communications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Clients.SaleOperation", "SaleOperation")
                        .WithMany("Communications")
                        .HasForeignKey("SaleOperationId");

                    b.Navigation("Client");

                    b.Navigation("SaleOperation");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.ConsultedProduct", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Clients.Communication", "Communication")
                        .WithMany("ConsultedProducts")
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Reminder", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Clients.Client", "Client")
                        .WithMany("Reminders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.SaleOperation", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Clients.Client", "Client")
                        .WithMany("SaleOperations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteDetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteHeader", "DeliveryNoteHeader")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("DeliveryNoteHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Production.WorkActivity", "WorkActivity")
                        .WithMany()
                        .HasForeignKey("WorkActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Configuration");

                    b.Navigation("DeliveryNoteHeader");

                    b.Navigation("Product");

                    b.Navigation("ProductItem");

                    b.Navigation("WorkActivity");
                });

            modelBuilder.Entity("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteHeader", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "TransportProvider")
                        .WithMany()
                        .HasForeignKey("TransportProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("TransportProvider");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Lists.City", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Lists.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Lists.State", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Commons.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeDetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteHeader", "DeliveryNoteHeader")
                        .WithMany()
                        .HasForeignKey("DeliveryNoteHeaderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "FatherProduct")
                        .WithMany()
                        .HasForeignKey("FatherProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "FatherStructure")
                        .WithMany()
                        .HasForeignKey("FatherStructureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Logistics.Incomes.IncomeHeader", "IncomeHeader")
                        .WithMany("IncomeDetails")
                        .HasForeignKey("IncomeHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "IncomeProduct")
                        .WithMany()
                        .HasForeignKey("IncomeProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Logistics.Incomes.IncomeState", "IncomeState")
                        .WithMany()
                        .HasForeignKey("IncomeStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.MissingProduct", "MissingProduct")
                        .WithMany()
                        .HasForeignKey("MissingProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryNoteHeader");

                    b.Navigation("FatherProduct");

                    b.Navigation("FatherStructure");

                    b.Navigation("IncomeHeader");

                    b.Navigation("IncomeProduct");

                    b.Navigation("IncomeState");

                    b.Navigation("MissingProduct");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeHeader", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Station", "ExternalProcessStation")
                        .WithMany()
                        .HasForeignKey("ExternalProcessStationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "TransportProvider")
                        .WithMany()
                        .HasForeignKey("TransportProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExternalProcessStation");

                    b.Navigation("Provider");

                    b.Navigation("TransportProvider");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.AccessoryProduct", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("AccessoryProducts")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "ProductAccessory")
                        .WithMany("AccessoryProductsOf")
                        .HasForeignKey("IdProductAccessory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAccessory");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Archive", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.ArchiveType", "ArchiveType")
                        .WithMany()
                        .HasForeignKey("ArchiveTypeId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("Archives")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchiveType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Product", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "ExistenceUnitMeasure")
                        .WithMany()
                        .HasForeignKey("ExistenceUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.IVACondition", "IVAType")
                        .WithMany()
                        .HasForeignKey("IVATypeId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Station", "LocationStation")
                        .WithMany()
                        .HasForeignKey("LocationStationId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "MinimumUnitMeasure")
                        .WithMany()
                        .HasForeignKey("MinimumUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.ProductFeature", "ProductFeature")
                        .WithMany()
                        .HasForeignKey("ProductFeatureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "QuantityToOrderUnitMeasure")
                        .WithMany()
                        .HasForeignKey("QuantityToOrderUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StockHeightUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StockHeightUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StockLengthUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StockLengthUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StockQuantityUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StockQuantityUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StockUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StockUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StockWeightUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StockWeightUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StockWidthUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StockWidthUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StorageUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StorageUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId");

                    b.Navigation("ExistenceUnitMeasure");

                    b.Navigation("IVAType");

                    b.Navigation("LocationStation");

                    b.Navigation("MinimumUnitMeasure");

                    b.Navigation("Operation");

                    b.Navigation("ProductFeature");

                    b.Navigation("QuantityToOrderUnitMeasure");

                    b.Navigation("StockHeightUnitMeasure");

                    b.Navigation("StockLengthUnitMeasure");

                    b.Navigation("StockQuantityUnitMeasure");

                    b.Navigation("StockUnitMeasure");

                    b.Navigation("StockWeightUnitMeasure");

                    b.Navigation("StockWidthUnitMeasure");

                    b.Navigation("StorageUnitMeasure");

                    b.Navigation("SubCategory");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductCutType", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.CutType", "CutType")
                        .WithMany("ProductsCutType")
                        .HasForeignKey("CutTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("ProductCutTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CutType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductPieceFormat", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.PieceFormat", "PieceFormat")
                        .WithMany("ProductsPieceFormat")
                        .HasForeignKey("PieceFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("ProductPieceFormats")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PieceFormat");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductPieceType", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.PieceType", "PieceType")
                        .WithMany("ProductsPieceType")
                        .HasForeignKey("PieceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("ProductPieceTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PieceType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.ProductSupplyVoltage", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("ProductSupplyVoltages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.SupplyVoltage", "SupplyVoltage")
                        .WithMany("ProductSupplyVoltage")
                        .HasForeignKey("SupplyVoltageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SupplyVoltage");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.RelProductStation", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("RelProductStations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Station", "Station")
                        .WithMany("RelProductStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Station", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.FunctionalArea", "FunctionalArea")
                        .WithMany("Stations")
                        .HasForeignKey("FunctionalAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FunctionalArea");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Structure", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.StructureVersion", "LastVersion")
                        .WithMany()
                        .HasForeignKey("LastVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("Structures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.SupplyVoltage", "SupplyVoltage")
                        .WithMany()
                        .HasForeignKey("SupplyVoltageId");

                    b.Navigation("LastVersion");

                    b.Navigation("Product");

                    b.Navigation("SupplyVoltage");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.StructureItem", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "SonProduct")
                        .WithMany()
                        .HasForeignKey("SonProductId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "SonStructure")
                        .WithMany()
                        .HasForeignKey("SonStructureId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "Structure")
                        .WithMany("StructureItems")
                        .HasForeignKey("StructureId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.StructureVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SonProduct");

                    b.Navigation("SonStructure");

                    b.Navigation("Structure");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.SubCategory", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.GroupedWorkAction", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkAction", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Production.WorkActivity", "WorkActivity")
                        .WithMany("WorkActions")
                        .HasForeignKey("WorkActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkActivity");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkActivity", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "OutsourcedProvider")
                        .WithMany()
                        .HasForeignKey("OutsourcedProviderId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.RelProductStation", "ProductStation")
                        .WithMany()
                        .HasForeignKey("ProductStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Production.WorkOrderItem", "WorkOrderItem")
                        .WithMany("WorkActivities")
                        .HasForeignKey("WorkOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutsourcedProvider");

                    b.Navigation("ProductStation");

                    b.Navigation("WorkOrderItem");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrder", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Production.WorkOrderHeader", "WorkOrderHeader")
                        .WithMany("WorkOrders")
                        .HasForeignKey("WorkOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrderHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrderItem", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Sales.OrderState", "OrderState")
                        .WithMany()
                        .HasForeignKey("OrderStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId");

                    b.HasOne("ERP.Domain.Entities.Production.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderItems")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Production.WorkOrderItem", "WorkOrderItemOf")
                        .WithMany("ChildsWorkOrderItems")
                        .HasForeignKey("WorkOrderItemOfId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OrderState");

                    b.Navigation("Product");

                    b.Navigation("Structure");

                    b.Navigation("WorkOrder");

                    b.Navigation("WorkOrderItemOf");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.MissingProducts.MissingProduct", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "QuantityToOrderUnitMeasure")
                        .WithMany()
                        .HasForeignKey("QuantityToOrderUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.PurchaseState", "StateMissingProduct")
                        .WithMany()
                        .HasForeignKey("StateMissingProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "StorageUnitMeasure")
                        .WithMany()
                        .HasForeignKey("StorageUnitMeasureId");

                    b.Navigation("Product");

                    b.Navigation("Provider");

                    b.Navigation("QuantityToOrderUnitMeasure");

                    b.Navigation("StateMissingProduct");

                    b.Navigation("StorageUnitMeasure");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Contact", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany("Contacts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.FinancialInformation", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany("FinancialInformations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Provider", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Lists.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Domain.Entities.Commons.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.IVACondition", "IVACondition")
                        .WithMany()
                        .HasForeignKey("IVAConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Lists.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("DocumentType");

                    b.Navigation("IVACondition");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.RelProviderProduct", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "HeightUnitMeasure")
                        .WithMany()
                        .HasForeignKey("HeightUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "LengthUnitMeasure")
                        .WithMany()
                        .HasForeignKey("LengthUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "PresentationUnitMeasure")
                        .WithMany()
                        .HasForeignKey("PresentationUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "PriceUnitMeasure")
                        .WithMany()
                        .HasForeignKey("PriceUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany("RelProviderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany("RelProviderProducts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "WeightUnitMeasure")
                        .WithMany()
                        .HasForeignKey("WeightUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "WidthUnitMeasure")
                        .WithMany()
                        .HasForeignKey("WidthUnitMeasureId");

                    b.Navigation("HeightUnitMeasure");

                    b.Navigation("LengthUnitMeasure");

                    b.Navigation("PresentationUnitMeasure");

                    b.Navigation("PriceUnitMeasure");

                    b.Navigation("Product");

                    b.Navigation("Provider");

                    b.Navigation("UnitMeasure");

                    b.Navigation("WeightUnitMeasure");

                    b.Navigation("WidthUnitMeasure");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.RelProviderStation", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "PriceUnitMeasure")
                        .WithMany()
                        .HasForeignKey("PriceUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany("RelProviderStations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Station", "Station")
                        .WithMany("RelProviderStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceUnitMeasure");

                    b.Navigation("Provider");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Subsidiary", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Lists.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Domain.Entities.Commons.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany("Subsidiaries")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Lists.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Provider");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderDetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Logistics.Incomes.IncomeDetail", "IncomeDetail")
                        .WithOne("PurchaseOrderDetail")
                        .HasForeignKey("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderDetail", "IncomeDetailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.MissingProduct", "MissingProduct")
                        .WithMany()
                        .HasForeignKey("MissingProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "PriceUnitMeasure")
                        .WithMany()
                        .HasForeignKey("PriceUnitMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "ProviderUnitMeasure")
                        .WithMany()
                        .HasForeignKey("ProviderUnitMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.PurchaseState", "PurchaseState")
                        .WithMany()
                        .HasForeignKey("PurchaseStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IncomeDetail");

                    b.Navigation("MissingProduct");

                    b.Navigation("PriceUnitMeasure");

                    b.Navigation("Product");

                    b.Navigation("ProviderUnitMeasure");

                    b.Navigation("PurchaseOrderHeader");

                    b.Navigation("PurchaseState");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderHeader", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseHeader", "QuoteRequestResponseHeader")
                        .WithMany()
                        .HasForeignKey("QuoteRequestResponseHeaderId");

                    b.Navigation("Provider");

                    b.Navigation("QuoteRequestResponseHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.ServicePODetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteDetail", "DeliveryNoteDetail")
                        .WithMany()
                        .HasForeignKey("DeliveryNoteDetailId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.PurchaseOrders.ServicePOHeader", "ServicePOHeader")
                        .WithMany("ServicePODetails")
                        .HasForeignKey("ServicePOHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId");

                    b.Navigation("DeliveryNoteDetail");

                    b.Navigation("Product");

                    b.Navigation("ServicePOHeader");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.ServicePOHeader", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.PurchaseState", "PurchaseState")
                        .WithMany()
                        .HasForeignKey("PurchaseStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.Navigation("Provider");

                    b.Navigation("PurchaseState");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestDetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.MissingProduct", "MissingProduct")
                        .WithMany()
                        .HasForeignKey("MissingProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "ProviderUnitMeasure")
                        .WithMany()
                        .HasForeignKey("ProviderUnitMeasureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.PurchaseState", "PurchaseState")
                        .WithMany()
                        .HasForeignKey("PurchaseStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "QuantityToOrderUnitMeasure")
                        .WithMany()
                        .HasForeignKey("QuantityToOrderUnitMeasureId");

                    b.HasOne("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestHeader", "QuoteRequestHeader")
                        .WithMany("QuoteRequestDetails")
                        .HasForeignKey("QuoteRequestHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissingProduct");

                    b.Navigation("Product");

                    b.Navigation("ProviderUnitMeasure");

                    b.Navigation("PurchaseState");

                    b.Navigation("QuantityToOrderUnitMeasure");

                    b.Navigation("QuoteRequestHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseDetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "AlternativeProduct")
                        .WithMany()
                        .HasForeignKey("AlternativeProductId");

                    b.HasOne("ERP.Domain.Entities.Purchases.MissingProducts.MissingProduct", "MissingProduct")
                        .WithMany()
                        .HasForeignKey("MissingProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "PriceUnitMeasure")
                        .WithMany()
                        .HasForeignKey("PriceUnitMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Commons.UnitMeasure", "ProviderUnitMeasure")
                        .WithMany()
                        .HasForeignKey("ProviderUnitMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseHeader", "QuoteRequestResponseHeader")
                        .WithMany("QuoteRequestResponseDetails")
                        .HasForeignKey("QuoteRequestResponseHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternativeProduct");

                    b.Navigation("MissingProduct");

                    b.Navigation("PriceUnitMeasure");

                    b.Navigation("ProviderUnitMeasure");

                    b.Navigation("QuoteRequestResponseHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseHeader", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestHeader", "QuoteRequestHeader")
                        .WithMany("QuoteRequestResponseHeaders")
                        .HasForeignKey("QuoteRequestHeaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("QuoteRequestHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.RelQuoteRequestProvider", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Providers.Provider", "Provider")
                        .WithMany("RelQuoteRequestProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestHeader", "QuoteRequestHeader")
                        .WithMany("RelQuoteRequestProviders")
                        .HasForeignKey("QuoteRequestHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("QuoteRequestHeader");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.DeliveryDateHistory", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Sales.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.OrderDetail", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Sales.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Sales.OrderState", "OrderState")
                        .WithMany()
                        .HasForeignKey("OrderStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Clients.SaleOperation", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("SaleOperationId");

                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.ProductMod.SupplyVoltage", "SupplyVoltage")
                        .WithMany()
                        .HasForeignKey("SupplyVoltageId");

                    b.HasOne("ERP.Domain.Entities.Production.WorkOrder", "WorkOrder")
                        .WithOne("OrderDetail")
                        .HasForeignKey("ERP.Domain.Entities.Sales.OrderDetail", "WorkOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OrderHeader");

                    b.Navigation("OrderState");

                    b.Navigation("Product");

                    b.Navigation("Structure");

                    b.Navigation("SupplyVoltage");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.OrderHeader", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Clients.Client", "Client")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ERP.Domain.Entities.Sales.OrderState", "OrderState")
                        .WithMany()
                        .HasForeignKey("OrderStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Clients.SaleOperation", "SaleOperation")
                        .WithMany()
                        .HasForeignKey("SaleOperationId");

                    b.Navigation("Client");

                    b.Navigation("OrderState");

                    b.Navigation("SaleOperation");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.Price", b =>
                {
                    b.HasOne("ERP.Domain.Entities.ProductMod.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.ProductMod.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Product");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Client", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("OrderHeaders");

                    b.Navigation("Reminders");

                    b.Navigation("SaleOperations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.Communication", b =>
                {
                    b.Navigation("ConsultedProducts");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Clients.SaleOperation", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.CommercialDocuments.DeliveryNote.DeliveryNoteHeader", b =>
                {
                    b.Navigation("DeliveryNoteDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Commons.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Lists.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeDetail", b =>
                {
                    b.Navigation("PurchaseOrderDetail");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Logistics.Incomes.IncomeHeader", b =>
                {
                    b.Navigation("IncomeDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.CutType", b =>
                {
                    b.Navigation("ProductsCutType");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.FunctionalArea", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.PieceFormat", b =>
                {
                    b.Navigation("ProductsPieceFormat");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.PieceType", b =>
                {
                    b.Navigation("ProductsPieceType");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Product", b =>
                {
                    b.Navigation("AccessoryProducts");

                    b.Navigation("AccessoryProductsOf");

                    b.Navigation("Archives");

                    b.Navigation("ProductCutTypes");

                    b.Navigation("ProductPieceFormats");

                    b.Navigation("ProductPieceTypes");

                    b.Navigation("ProductSupplyVoltages");

                    b.Navigation("RelProductStations");

                    b.Navigation("RelProviderProducts");

                    b.Navigation("Structures");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Station", b =>
                {
                    b.Navigation("RelProductStations");

                    b.Navigation("RelProviderStations");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.Structure", b =>
                {
                    b.Navigation("StructureItems");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProductMod.SupplyVoltage", b =>
                {
                    b.Navigation("ProductSupplyVoltage");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkActivity", b =>
                {
                    b.Navigation("WorkActions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrder", b =>
                {
                    b.Navigation("OrderDetail");

                    b.Navigation("WorkOrderItems");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrderHeader", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Production.WorkOrderItem", b =>
                {
                    b.Navigation("ChildsWorkOrderItems");

                    b.Navigation("WorkActivities");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Providers.Provider", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("FinancialInformations");

                    b.Navigation("RelProviderProducts");

                    b.Navigation("RelProviderStations");

                    b.Navigation("RelQuoteRequestProviders");

                    b.Navigation("Subsidiaries");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.PurchaseOrderHeader", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrders.ServicePOHeader", b =>
                {
                    b.Navigation("ServicePODetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestHeader", b =>
                {
                    b.Navigation("QuoteRequestDetails");

                    b.Navigation("QuoteRequestResponseHeaders");

                    b.Navigation("RelQuoteRequestProviders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.QuoteRequests.QuoteRequestResponseHeader", b =>
                {
                    b.Navigation("QuoteRequestResponseDetails");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
