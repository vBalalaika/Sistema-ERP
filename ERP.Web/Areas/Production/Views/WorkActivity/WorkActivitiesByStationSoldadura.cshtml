@using ERP.Web.Areas.Production.Models
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<ERP.Language.SharedResource> localizer
@model WorkActivitiesViewModel

<div class="form-row d-flex justify-content-center">
    <div id="div-export-buttons">
        <div class="btn-group">
            <a id="btnManageActivities" class="btn btn-secondary text-white" title="@localizer["Manage Activities"]">
                <img class="tables-img-icon" src="~/images/fabricar blanco.svg" width="30" height="30" />
            </a>
        </div>
    </div>
</div>

<table id="activitiesTableTorno" class="table table-striped w-100 search-table nowrap " cellspacing="0">
    <thead class="bg-thead">
        <tr>
            <th></th>
            <th hidden>@localizer["Id"]</th>
            @if ((AuthorizationService.AuthorizeAsync(User, Permissions.WorkActivities.Edit)).Result.Succeeded)
            {
                <th>@localizer["Actions"]</th>
            }
            <th>@localizer["Code"]</th>
            <th>@localizer["Description"]</th>
            <th>@localizer["Quantity"]</th>
            <th>@localizer["Raw material description"]</th>
            <th>@localizer["Width"]</th>
            <th>@localizer["Length"]</th>
            <th>@localizer["Archives"]</th>
            <th>@localizer["Next station"]</th>
            <th>@localizer["Start"]</th>
            <th>@localizer["End"]</th>
            <th>@localizer["Time"]</th>
        </tr>
    </thead>
    <tbody>
        @{
            var index = 0;
            var quantityWorkOrderItem = 0;
            var productCodeWorkOrderItem = "";
        }

        @foreach (var activitygroup in Model.ActivitiesGroups)
        {

            @foreach (var activity in activitygroup.Activities)
            {
                quantityWorkOrderItem = 0;
                if (productCodeWorkOrderItem != activity.WorkOrderItem.Product.Code)
                {
                    productCodeWorkOrderItem = activity.WorkOrderItem.Product.Code;
                    <tr>
                        <td>
                        </td>
                        <td hidden>
                            @activitygroup.AllActivities.First().Id
                        </td>
                        <td class="text-left">
                            <div class="btn-group">
                                <div class="d-flex animated--grow-in">
                                    @if ((AuthorizationService.AuthorizeAsync(User, Permissions.WorkActivities.Edit)).Result.Succeeded)
                                    {
                                        // Deshabilito los botones para los conjuntos
                                        if (activitygroup.Activities.First().WorkOrderItem.Product.SubCategoryId != 4 &&
                                        activitygroup.Activities.First().WorkOrderItem.Product.SubCategoryId != 25 &&
                                        activitygroup.Activities.First().WorkOrderItem.Product.SubCategoryId != 26 &&
                                        activitygroup.Activities.First().WorkOrderItem.Product.SubCategoryId != 27 &&
                                        activitygroup.Activities.First().WorkOrderItem.Product.SubCategoryId != 28)
                                        {
                                            <a class="btn @activitygroup.Activities.First().DisablePlay action-btn" title="@localizer["Play"]" onclick="PostAction('@activitygroup.RelativeActivitiesIds', 'play')"><img class="action-img-icon" src="../../../images/play.svg" width="20" height="20" /></a>
                                            <a class="btn @activitygroup.Activities.First().DisablePause action-btn" title="@localizer["Pause"]" onclick="PostAction('@activitygroup.RelativeActivitiesIds', 'pause')"><img class="action-img-icon" src="../../../images/pausa.svg" width="20" height="20" /></a>
                                            <a class="btn @activitygroup.Activities.First().DisableStop action-btn" title="@localizer["Stop"]" onclick="PostAction('@activitygroup.RelativeActivitiesIds', 'stop')"><img class="action-img-icon" src="../../../images/stop.svg" width="20" height="20" /></a>
                                        }
                                        else
                                        {
                                            <a class="btn disabled action-btn" title="@localizer["Play"]" onclick="PostAction('@activitygroup.RelativeActivitiesIds', 'play')"><img class="action-img-icon" src="../../../images/play.svg" width="20" height="20" /></a>
                                            <a class="btn disabled action-btn" title="@localizer["Pause"]" onclick="PostAction('@activitygroup.RelativeActivitiesIds', 'pause')"><img class="action-img-icon" src="../../../images/pausa.svg" width="20" height="20" /></a>
                                            <a class="btn disabled action-btn" title="@localizer["Stop"]" onclick="PostAction('@activitygroup.RelativeActivitiesIds', 'stop')"><img class="action-img-icon" src="../../../images/stop.svg" width="20" height="20" /></a>
                                        }
                                    }

                                </div>
                            </div>
                        </td>
                        <td>
                            @activitygroup.Activities.First().WorkOrderItem.Product.Code
                        </td>

                        <td>
                            @activitygroup.Activities.First().WorkOrderItem.Product.Description
                        </td>
                        <td>
                            @{
                                if (activitygroup.Activities.Count > 1)
                                {
                                    @foreach (var act in activitygroup.Activities)
                                    {
                                        quantityWorkOrderItem += act.WorkOrderItem.Quantity;
                                    }
                                }
                                else if (activitygroup.Activities.Count == 1)
                                {
                                    quantityWorkOrderItem = activity.WorkOrderItem.Quantity;
                                }
                            }
                            @quantityWorkOrderItem
                        </td>
                        <td>
                            @activitygroup.Activities.First().WorkOrderItem.Product.ProductFeature.RawMaterialDescription
                        </td>
                        <td>
                            @activitygroup.Activities.First().WorkOrderItem.Product.ProductFeature.ComponentWidhtPiece
                        </td>
                        <td>
                            @activitygroup.Activities.First().WorkOrderItem.Product.ProductFeature.ComponentLongPiece
                        </td>
                        <td class="text-center">
                            @if(activitygroup.Activities.First().WorkOrderItem.Product.Archives.Count > 0)
                            {
                                @foreach (var row in activitygroup.Activities.First().WorkOrderItem.Product.Archives)
                                {
                                    var path = @row.PathUrl.Replace(@"\\172.16.50.240\ARCHIVOS\SIMPLEMAK\OFICINA TECNICA", "/files");
                                    if (@row.ArchiveTypeId == 1) //PLANOS
                                    {
                                        <a href="http:@path" target="_blank" title="@localizer["Planos"]" class="btn action-btn"><img class="action-img-icon" src="../../../images/Plano.svg" width="20" height="20" /></a>
                                    }
                                    else if (@row.ArchiveTypeId == 3) //3D
                                    {
                                        <a href="http:@path" target="_blank" title="@localizer["3D"]" class="btn action-btn"><img class="action-img-icon" src="../../../images/3D.svg" width="20" height="20" /></a>
                                    }
                                }
                            }
                        </td>
                        <td>
                            @activity.NextStation
                        </td>

                        <td>
                            @if (activitygroup.FirstActionAllRelativesActivities != null)
                            {
                                @activitygroup.FirstActionAllRelativesActivities.StartDate;
                            }
                        </td>
                        <td>
                            @if (activitygroup.StopActionAllRelativeActivities != null)
                            {
                                @activitygroup.StopActionAllRelativeActivities.StartDate;
                            }
                        </td>
                        <td>
                            @activitygroup.TotalTimeAllRelativeActivities
                        </td>

                    </tr>
                }

                index++;
            }
        }

    </tbody>
    <tfoot>
        <tr>
            <th></th>
            <th hidden>@localizer["Id"]</th>
            @if ((AuthorizationService.AuthorizeAsync(User, Permissions.WorkActivities.Edit)).Result.Succeeded)
            {
                <th>@localizer["Actions"]</th>
            }
            <th>@localizer["Code"]</th>
            <th>@localizer["Description"]</th>
            <th>@localizer["Quantity"]</th>
            <th>@localizer["Raw material description"]</th>
            <th>@localizer["Width"]</th>
            <th>@localizer["Length"]</th>
            <th>@localizer["Archives"]</th>
            <th>@localizer["Next station"]</th>
            <th>@localizer["Start"]</th>
            <th>@localizer["End"]</th>
            <th>@localizer["Time"]</th>
        </tr>
    </tfoot>
</table>
<script>
    $(document).ready(function () {

        PostAction = (ids, action) => {
            try {
                var canAction = true;
                if (action=="stop") {
                    canAction = confirm('@localizer["Are you sure to finish the activity? This action is irreversible."]')
                }
                if (canAction) {
                    $.ajax({
                        type: 'POST',
                        url: "/production/workactivity/newAction?activitiesIds=" + ids + "&actionName=" + action + "",
                        contentType: false,
                        processData: false,
                        success: function (res) {
                            if (res.isValid) {
                                loadData();
                            }
                        },
                        error: function (err) {
                            console.log(err)
                        }
                    })
                }

                return false;
            } catch (ex) {
                console.log(ex)
            }
        }

        $('#activitiesTableTorno tfoot th').each(function (i) {
            var title = $(this).text();
            if (title != "@localizer["Actions"]" && title != "") {
                $(this).html('<input type="text" class="search-control" placeholder="' + title + '" data-index="' + i + '" />');
            } else {
                $(this).html('');
            }
        });

        let ActivitiesIdList = [];
        let activitiesTableTorno = $("#activitiesTableTorno").DataTable({
            "columnDefs": [
                {
                    "targets": [0],
                    "render": function (data, type, row, meta) {
                        return '<a class="btn action-btn"><div class="custom-control custom-checkbox small"><input class="checkSelectedRow custom-control-input" type="checkbox" value="" id="checkSelectedRow_'+ meta.row +'"><label class="custom-control-label" for="checkSelectedRow_' + meta.row + '"></label></div></a>'
                    }
                },
            ],
            "aaSorting": [],
            "sDom": 'Brtip',
            "oLanguage": @localizer["LanguageDataTable"],
            scrollY: '65vh',
            scrollX: true,
            scrollCollapse: true,
            scroller: true,
            scroller: {
                loadingIndicator: true
            },
            "buttons": [
                {
                    extend: 'excelHtml5',
                    text: '<img src="../../../images/Excel.svg" width="30" height="30" />',
                    titleAttr: 'Exportar archivo Excel',
                    title: "Trabajo de puesto: " + '@Model.Station.AbreviationDescription',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                    }
                }
            ]
        });

        let rows = activitiesTableTorno.rows().data();
        for (let i = 0; i < rows.length; i++) {
            let checkSelectedRow = document.getElementById('checkSelectedRow_' + i);

            checkSelectedRow.addEventListener('change', function () {
                if (this.checked) {
                    ActivitiesIdList.push(rows[i][1]);
                } else {
                    const index = ActivitiesIdList.indexOf(rows[i][1]);
                    if (index > -1) {
                        ActivitiesIdList.splice(index, 1);
                    }
                }
            });
        }

        $('#btnManageActivities').on('click', function () {
            if (ActivitiesIdList.length > 0) {
                jQueryModalGet('/production/workactivity/GetActivitiesAndChilds?strFatherActivitiesIds=' + ActivitiesIdList + '&stationId=' +@Model.Station.Id+'&initialFathersIds=' + ActivitiesIdList, '@localizer["Manage group activities"]');
            }
            ActivitiesIdList = [];
            checksReset();
        });

        activitiesTableTorno.buttons().container()
            .appendTo('#div-export-buttons .btn-group');

        $(activitiesTableTorno.table().container()).on('keyup', 'tfoot input', function () {
            activitiesTableTorno
                .column($(this).data('index'))
                .search(this.value)
                .draw();
        });
    });

    function checksReset() {
        let rows = $("#activitiesTableTorno").DataTable().rows().data();
        for (let i = 0; i < rows.length; i++) {
            let checkSelectedRow = document.getElementById('checkSelectedRow_' + i);
            checkSelectedRow.checked = false;
        }
    }
</script>
